// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.4 (swiftlang-1205.0.26.9 clang-1205.0.19.55)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name BecomeDigitalV
import AVFoundation
import AVKit
import Alamofire
@_exported import BecomeDigitalV
import CoreData
import Foundation
import ImageIO
import MapKit
import Photos
import Swift
import SystemConfiguration
import UIKit
import UserNotifications
extension UIImageView {
  public func loadGif(name: Swift.String)
}
extension UIImage {
  public class func gif(data: Foundation.Data) -> UIKit.UIImage?
  public class func gif(url: Swift.String) -> UIKit.UIImage?
  public class func gif(name: Swift.String) -> UIKit.UIImage?
}
@objc public protocol BDIVDelegate {
  @objc func BDIVResponseSuccess(bdivResult: Swift.AnyObject)
  @objc func BDIVResponseError(error: Swift.String)
}
public struct GlobalVariables : Swift.Codable {
  public static var rootViewController: BecomeDigitalV.MainViewController?
  public func encode(to encoder: Swift.Encoder) throws
  public init(from decoder: Swift.Decoder) throws
}
extension Countries {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<BecomeDigitalV.Countries>
  @objc @NSManaged dynamic public var id: Swift.Int16 {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var type: Swift.Int16 {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var country_name: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var co_3: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var co_2: Swift.String? {
    @objc get
    @objc set(value)
  }
  @objc @NSManaged dynamic public var airport_code: Swift.String? {
    @objc get
    @objc set(value)
  }
}
public struct ResponseIV {
  public init(id: Swift.String, created_at: Swift.String, company: Swift.String, fullname: Swift.String, dni_number: Swift.String, birth: Swift.String, document_type: Swift.String, document_number: Swift.String, face_match: Swift.Bool, template: Swift.Bool, alteration: Swift.Bool, watch_list: Swift.Bool, comply_advantage_result: Swift.String, comply_advantage_url: Swift.String, verification_status: Swift.String, device_model: Swift.String, os_version: Swift.String, browser_major: Swift.String, browser_version: Swift.String, ua: Swift.String, device_type: Swift.String, device_vendor: Swift.String, os_name: Swift.String, browser_name: Swift.String, issuePlace: Swift.String, emissionDate: Swift.String, ageRange: Swift.String, savingAccountsCount: Swift.String, financialIndustryDebtsCount: Swift.String, solidarityIndustryDebtsCount: Swift.String, serviceIndustryDebtsCount: Swift.String, commercialIndustryDebtsCount: Swift.String, ip: Swift.String, frontImgUrl: Swift.String, backImgUrl: Swift.String, selfiImageUrl: Swift.String, message: Swift.String, responseStatus: BecomeDigitalV.ResponseIV.typeEstatus)
  public init()
  public enum typeEstatus {
    case SUCCES
    case ERROR
    case PENDING
    case NOFOUND
    public static func == (a: BecomeDigitalV.ResponseIV.typeEstatus, b: BecomeDigitalV.ResponseIV.typeEstatus) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public var id: Swift.String
  public var created_at: Swift.String
  public var company: Swift.String
  public var fullname: Swift.String
  public var dni_number: Swift.String
  public var birth: Swift.String
  public var document_type: Swift.String
  public var document_number: Swift.String
  public var face_match: Swift.Bool
  public var template: Swift.Bool
  public var alteration: Swift.Bool
  public var watch_list: Swift.Bool
  public var comply_advantage_result: Swift.String
  public var comply_advantage_url: Swift.String
  public var verification_status: Swift.String
  public var device_model: Swift.String
  public var os_version: Swift.String
  public var browser_major: Swift.String
  public var browser_version: Swift.String
  public var ua: Swift.String
  public var device_type: Swift.String
  public var device_vendor: Swift.String
  public var os_name: Swift.String
  public var browser_name: Swift.String
  public var issuePlace: Swift.String
  public var emissionDate: Swift.String
  public var ageRange: Swift.String
  public var savingAccountsCount: Swift.String
  public var financialIndustryDebtsCount: Swift.String
  public var solidarityIndustryDebtsCount: Swift.String
  public var serviceIndustryDebtsCount: Swift.String
  public var commercialIndustryDebtsCount: Swift.String
  public var ip: Swift.String
  public var frontImgUrl: Swift.String
  public var backImgUrl: Swift.String
  public var selfiImageUrl: Swift.String
  public var message: Swift.String
  public var responseStatus: BecomeDigitalV.ResponseIV.typeEstatus
}
public struct BDIVConfig {
  public init(clienId: Swift.String, clientSecret: Swift.String, contractId: Swift.String, validationTypes: Swift.String, userId: Swift.String, allowLibraryLoading: Swift.Bool, customerLogo: Swift.String)
  public let clienId: Swift.String
  public var customerLogo: Swift.String
  public let clientSecret: Swift.String
  public let contractId: Swift.String
  public let validationTypes: Swift.String
  public let allowLibraryLoading: Swift.Bool
  public let userId: Swift.String
}
@_hasMissingDesignatedInitializers public class CountriesView {
  public static func getCountriess() -> [BecomeDigitalV.Countries]
  public static func getCountriesByCo3(co3: Swift.String) -> [BecomeDigitalV.Countries]
  public static func getCountriesByCo2(co2: Swift.String) -> [BecomeDigitalV.Countries]
  public static func getCountriesByType(type: Swift.Int16) -> [BecomeDigitalV.Countries]
  public static func entityCountriesIsEmpty() -> Swift.Bool
  public static func deleteEntity(countries: BecomeDigitalV.Countries)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(Countries) public class Countries : CoreData.NSManagedObject {
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class BDIVCallBack {
  public class var sharedInstance: BecomeDigitalV.BDIVCallBack {
    get
  }
  weak public var delegate: BecomeDigitalV.BDIVDelegate?
  public func register(bdivConfig: BecomeDigitalV.BDIVConfig)
  @objc deinit
}
extension NSPersistentStoreCoordinator {
  public enum CoordinatorError : Swift.Error {
    case modelFileNotFound
    case modelCreationError
    case storePathNotFound
    public static func == (a: CoreData.NSPersistentStoreCoordinator.CoordinatorError, b: CoreData.NSPersistentStoreCoordinator.CoordinatorError) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
}
@objc @_inheritsConvenienceInitializers public class Permissions : UIKit.UIResponder, UIKit.UIApplicationDelegate, UserNotifications.UNUserNotificationCenterDelegate, CoreLocation.CLLocationManagerDelegate {
  @objc override dynamic public init()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class MainViewController : UIKit.UIViewController {
  @objc dynamic public init()
  public var bdivConfig: BecomeDigitalV.BDIVConfig?
  public var delegate: BecomeDigitalV.BDIVDelegate?
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc deinit
}
